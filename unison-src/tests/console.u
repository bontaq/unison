ability State s where
  get : {State s} s
  set : s -> {State s} ()

ability Console where
  read : {Console} (Optional Text)
  write : Text -> {Console} ()

fst x = case x of Tuple.Cons a _ -> a

--TODO type is wrongly being inferred (or at least displayed) as `Tuple a (Tuple a b) ->{} a`
snd x = case x of Tuple.Cons _ (Tuple.Cons b _) -> b

namespace Console where

  state : s -> Request (State s) a -> a
  state s c = case c of
    {State.get -> k} -> handle state s with k s
    {State.set s' -> k} -> handle state s' with k ()
    {a} -> a

  simulate : Request Console d -> {State ([Text], [Text])} d
  simulate c = case c of
    {Console.read -> k} ->
      io = State.get
      ins = fst io
      outs = snd io
      State.set (drop 1 ins, outs)
      -- this really should typecheck but doesn't for some reason
      -- error is that `simulate` doesn't check against `Request Console c -> r`,
      -- but seems like that `r` should get instantiated as `{State (..)} c`.
      handle simulate with k (at 0 ins)
    {Console.write t -> k} ->
      io = State.get
      ins = fst io
      outs = snd io
      -- same deal here
      handle simulate with k (State.set (ins, cons t outs))
    {a} -> a

(++) = (Text.++)

x = handle Console.state ([],[]) with
      handle Console.simulate with
        use Console read write
        use Optional Some None
        write "What's your name?"
        case read of
          Some name -> write ("Hello" ++ name)
          None -> write "Fine, be that way."

> x
